<Application x:Class="CocoloresPEP.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CocoloresPEP"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:focus="clr-namespace:CocoloresPEP.Common.WpfCore.Behaviors.Focus"
             xmlns:entities="clr-namespace:CocoloresPEP.Common.Entities"
             xmlns:converter="clr-namespace:CocoloresPEP.Common.WpfCore.Converter"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <!--<ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/PresentationFramework.Aero;component/themes/Aero.NormalColor.xaml"/>
            </ResourceDictionary.MergedDictionaries>-->
            
            <converter:EnumHasFlagConverter x:Key="MyEnumHasFlagConverter"/>
            <converter:EnumDescriptionConverter x:Key="MyEnumDecriptionConverter"/>
            <converter:CheckPositivNegativeZeroNumberConverter x:Key="MyCheckPositivNegativeZeroNumberConverter"/>
            <converter:NumberToAbsolutOneWayConverter x:Key="MyNumberToAbsolutOneWayConverter"/>
            <converter:StundenToMinutenConverter x:Key="MyStundenToMinutenConverter"/>
            <converter:VisibilityIfNullConverter x:Key="MyVisibilityIfNullConverter"/>
            <converter:StringEmptyToDisplayValueConverter x:Key="MyStringEmptyToDisplayValueConverter"/>
            <converter:BoolToVisibilityConverter x:Key="TrueIfVisibleConverter" Inverted="False" Not="False" />
            <converter:BoolToVisibilityConverter x:Key="TrueIfNotVisibleConverter" Inverted="False" Not="True" />
            <converter:BoolToVisibilityConverter x:Key="VisibleIfTrueConverter" Inverted="True" Not="False" />
            <converter:BoolToVisibilityConverter x:Key="VisibleIfNotTrueConverter" Inverted="True" Not="True" />


            <system:Double x:Key="FontSize">16</system:Double>
            <system:Double x:Key="FontSizeSmall">14</system:Double>
            <FontFamily x:Key="FontFamily">Consolas</FontFamily>

            <SolidColorBrush x:Key="PathImageColor" Color="DarkGreen"/>
            <SolidColorBrush x:Key="IsDisabledForegroundBrush" Color="Black"/>
            <SolidColorBrush x:Key="BrushError" Color="Red"/>

            <SolidColorBrush x:Key="ColorGruppeGelb" Color="DarkGoldenrod"/>
            <SolidColorBrush x:Key="ColorGruppeGruen" Color="LightGreen"/>
            <SolidColorBrush x:Key="ColorGruppeRot" Color="LightCoral"/>
            <SolidColorBrush x:Key="ColorGruppeNest" Color="LightBlue"/>
            <SolidColorBrush x:Key="ColorExpanderBackground" Color="DarkSalmon"/>

            <!--STYLES-->
            <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}">
                <Setter Property="FontFamily" Value="{StaticResource FontFamily}"/>
                <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
            </Style>

            <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
                <Setter Property="FontFamily" Value="{StaticResource FontFamily}"/>
                <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
            </Style>

            <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
                <Setter Property="FontFamily" Value="{StaticResource FontFamily}"/>
                <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
            </Style>

            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                <Setter Property="FontFamily" Value="{StaticResource FontFamily}"/>
                <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
            </Style>

            <Style x:Key="ToolbarButtonStyle" TargetType="Button">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Command, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                        <Setter Property="IsEnabled" Value="False"></Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="PathImageStyle" TargetType="Path">
                <Setter Property="Fill" Value="{DynamicResource PathImageColor}"></Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type UIElement}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                        <Setter Property="Fill" Value="DarkGray"></Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!--weil sonst binding errors manchmal (http://www.interact-sw.co.uk/iangblog/2007/02/14/wpfdefaulttemplate) 
             (http://stackoverflow.com/questions/160391/listbox-with-grid-as-itemspaneltemplate-produces-weird-binding-errors)-->
            <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Style>

            <!-- Control Styles -->
            <ControlTemplate x:Key="ValidationTemplate" >
                <Grid>
                    <AdornedElementPlaceholder Name="MyAdornedElement" />
                    <Path x:Name="path"  Margin="-2,-2,0,0" Data="M 0,10 L 10,0 L 0,0 Z" Fill="{StaticResource BrushError}" StrokeThickness="2" Stroke="White" 
                   Visibility="{Binding ElementName=MyAdornedElement,Path=AdornedElement.Visibility}"
                   ToolTip="{Binding ElementName=MyAdornedElement,Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}"/>
                </Grid>
            </ControlTemplate>

            <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
                <Setter Property="focus:FocusBorderAdornerBehavior.IsEnabledForStyle" Value="True"/>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
                <Setter Property="UndoLimit" Value="0"/>
                <Setter Property="MinHeight" Value="26.23"/>
                <Style.Triggers>
                    <Trigger Property="IsVisible" Value="false">
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                    </Trigger>
                    <Trigger Property="IsVisible" Value="true">
                        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{StaticResource IsDisabledForegroundBrush}"/>
                    </Trigger>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors).CurrentItem.ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="{x:Type Calendar}" TargetType="{x:Type Calendar}">
                <Setter Property="CalendarDayButtonStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type CalendarDayButton}" BasedOn="{StaticResource {x:Type CalendarDayButton}}">
                            <Style.Triggers>
                                <Trigger Property="IsBlackedOut" Value="True">
                                    <Setter Property="Background" Value="LightGray"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
